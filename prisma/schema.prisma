// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type CinemaTiket {
  id Int
  title String
  overview String
  thumbnailUrl String
  status String
  voteCount Int
  voteAverage Int
  ticketPrice Float
  quantity Int
  provinceId Int?
  cinemaId String?
  dayBookTicket String?
  type String?
  movieScreenTime String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  role String @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]
  accounts Account[]
  cinemaTicket CinemaTiket[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}

model Province {
  id Int @id @map("_id")
  name String
  cinema Cinema[]
}

model Cinema {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  provinceId Int
  province Province? @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  screenings Screenings[]
}

type SelectJson {
  label String
  value String
}
model Screenings {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cinemaId String @db.ObjectId
  dayBookTicket String
  types String[]
  movieScreenTimes String[]
  cinema Cinema? @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
}